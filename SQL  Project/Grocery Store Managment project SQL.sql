CREATE DATABASE GROCERYDB;
USE GROCERYDB;

-- 1.SUPPLIER TABLE
CREATE TABLE SUPPLIER(
SUPPLIER_ID TINYINT PRIMARY KEY,
SUPPLIER_NAME VARCHAR(255),
ADDRESS TEXT
);

SELECT * FROM SUPPLIER;

-- 2.CATEGORIES TABLE
CREATE TABLE IF NOT EXISTS CATEGORIES(
CATEGORY_ID TINYINT PRIMARY KEY,
CATEGORY_NAME VARCHAR(255)
);

SELECT * FROM CATEGORIES;

-- 3.EMPLOYEES TABLE
CREATE TABLE IF NOT EXISTS EMPLOYEES(
EMPLOYEE_ID TINYINT PRIMARY KEY,
EMPLOYEE_NAME VARCHAR(255),
HIRE_DATE VARCHAR(255)
);

SELECT * FROM EMPLOYEES;

-- 4.CUSTOMERS TABLE
CREATE TABLE IF NOT EXISTS CUSTOMERS (
CUSTOMER_ID SMALLINT PRIMARY KEY,
CUSTOMER_NAME VARCHAR(255),
ADDRESS TEXT
);

SELECT * FROM CUSTOMERS;

-- 5.PRODUCTS TABLE
CREATE TABLE IF NOT EXISTS PRODUCTS(
PRODUCT_ID TINYINT PRIMARY KEY,
PRODUCT_NAME VARCHAR(255),
SUPPLIER_ID TINYINT,
CATEGORY_ID TINYINT,
PRICE DECIMAL(10,2),
FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER(SUPPLIER_ID)
ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID)
ON UPDATE CASCADE ON DELETE CASCADE
);

SELECT * FROM PRODUCTS;

-- 6.ORDERS TABLE
CREATE TABLE IF NOT EXISTS ORDERS(
ORDER_ID SMALLINT PRIMARY KEY,
CUSTOMER_ID SMALLINT,
EMPLOYEE_ID TINYINT,
ORDER_DATE VARCHAR(255),
FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
ON UPDATE CASCADE ON DELETE CASCADE
);

SELECT * FROM ORDERS;

-- 7.ORDER DETAILS TABLE
CREATE TABLE IF NOT EXISTS ORDER_DETAILS(
ORDER_DETAILS_ID SMALLINT AUTO_INCREMENT PRIMARY KEY,
ORDER_ID SMALLINT,
PRODUCT_ID TINYINT,
QUANTITY TINYINT,
EACH_PRICE DECIMAL(10,2),
TOTAL_PRICE DECIMAL(10,2),
FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
ON UPDATE CASCADE ON DELETE CASCADE
);

SELECT * FROM ORDER_DETAILS;

/*
CUSTOMER INSIGHTS
1.HOW MANY UNIQUE CUSTOMERS HAVE PLACED ORDERS ?
*/
SELECT 
	COUNT(DISTINCT CUSTOMER_ID) AS UNIQUE_CUSTOMERS 
FROM 
	ORDERS;


-- 2.WHICH CUSTOMERS HAVE PLACED THE HIGHEST NUMBER OF ORDERS?
SELECT CUSTOMERS.CUSTOMER_ID,CUSTOMERS.CUSTOMER_NAME,
COUNT(ORDER_ID) AS ORDERS_COUNT FROM ORDERS
JOIN CUSTOMERS 
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
GROUP BY CUSTOMER_ID, CUSTOMER_NAME
ORDER BY ORDERS_COUNT DESC
LIMIT 1;

-- 3.WHAT IS THE TOTAL AND AVERAGE PURCHASE VALUE PER CUSTOMER ?
SELECT CUSTOMERS.CUSTOMER_ID, CUSTOMERS.CUSTOMER_NAME,
SUM(ORDER_DETAILS.TOTAL_PRICE) AS TOTAL_PRICE,
AVG(ORDER_DETAILS.TOTAL_PRICE) AS AVERAGE_PRICE 
FROM ORDERS
JOIN ORDER_DETAILS
ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
JOIN CUSTOMERS
ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
GROUP BY ORDERS.CUSTOMER_ID;

-- 4.WHO ARE THE TOP 5 CUSTOMERS BY TOTAL PURCHASE AMOUNT ?
SELECT CUSTOMERS.CUSTOMER_ID, CUSTOMERS.CUSTOMER_NAME,
SUM(ORDER_DETAILS.TOTAL_PRICE) AS TOTAL_PRICE
FROM ORDERS
JOIN ORDER_DETAILS
ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
JOIN CUSTOMERS
ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
GROUP BY ORDERS.CUSTOMER_ID
ORDER BY TOTAL_PRICE DESC
LIMIT 5;

-- PRODUCT PERFORMANCE
-- 5.HOW MANY PRODUCTS EXIST IN EACH CATEGORY?
SELECT CATEGORIES.CATEGORY_ID, CATEGORIES.CATEGORY_NAME,
COUNT(PRODUCTS.PRODUCT_ID) AS TOTAL_COUNT
FROM CATEGORIES
JOIN PRODUCTS
ON CATEGORIES.CATEGORY_ID = PRODUCTS.CATEGORY_ID
GROUP BY CATEGORIES.CATEGORY_ID;

-- 6.WHAT IS THE AVERAGE PRICE OF PRODUCTS BY CATEGORY?
SELECT CATEGORIES.CATEGORY_ID, CATEGORIES.CATEGORY_NAME, 
AVG(PRODUCTS.PRICE) AS AVERAGE_PRICE FROM CATEGORIES
JOIN PRODUCTS
ON CATEGORIES.CATEGORY_ID = PRODUCTS.CATEGORY_ID
GROUP BY CATEGORIES.CATEGORY_ID;

-- 7.WHICH PRODUCTS HAVE THE HIGHEST TOTAL SALES VOLUME(BY QUANTITY)?
SELECT PRODUCTS.PRODUCT_NAME, SUM(QUANTITY) AS HIGH_SALES
FROM ORDER_DETAILS
JOIN PRODUCTS
ON PRODUCTS.PRODUCT_ID = ORDER_DETAILS.PRODUCT_ID
GROUP BY PRODUCTS.PRODUCT_NAME
ORDER BY HIGH_SALES DESC
LIMIT 1;
 
-- 8.WHAT IS THE TOTAL REVENUE GENERATED BY EACH PRODUCT?
SELECT PRODUCTS.PRODUCT_NAME, 
SUM(ORDER_DETAILS.TOTAL_PRICE) AS TOTAL_REVENUE
FROM ORDER_DETAILS
JOIN PRODUCTS
ON PRODUCTS.PRODUCT_ID = ORDER_DETAILS.PRODUCT_ID
GROUP BY PRODUCTS.PRODUCT_NAME;

-- 9.HOW DO PRODUCT SALES VARY BY CATEGORY AND SUPPLIER?
SELECT CATEGORIES.CATEGORY_NAME, SUPPLIER.SUPPLIER_NAME,
SUM(ORDER_DETAILS.TOTAL_PRICE) AS TOTAL_SALES FROM ORDER_DETAILS
JOIN PRODUCTS
ON ORDER_DETAILS.PRODUCT_ID = PRODUCTS.PRODUCT_ID
JOIN CATEGORIES
ON PRODUCTS.CATEGORY_ID = CATEGORIES.CATEGORY_ID
JOIN SUPPLIER
ON PRODUCTS.SUPPLIER_ID = SUPPLIER.SUPPLIER_ID
GROUP BY CATEGORIES.CATEGORY_NAME, SUPPLIER.SUPPLIER_NAME
ORDER BY CATEGORIES.CATEGORY_NAME,TOTAL_SALES DESC;

-- SALES AND ORDER TRENDS\
-- 10.HOW MANY ORDERS HAVE BEEN PLACED IN TOTAL?
SELECT 
	COUNT(*) AS TOTAL_ORDERS 
FROM 
	ORDERS;

-- 11.WHAT IS THE AVERAGE VALUE PER ORDER?
SELECT 
SUM(TOTAL_PRICE) / COUNT(DISTINCT ORDER_ID) 
AS AVERAGE_ORDER_VALUE
FROM ORDER_DETAILS;

-- 12.ON WHICH DATES WERE THE MOST ORDERS PLACED?
SELECT ORDERS.ORDER_DATE, 
COUNT(ORDERS.ORDER_ID) AS ORDERS_COUNT
FROM ORDERS
GROUP BY ORDERS.ORDER_DATE
ORDER BY ORDERS_COUNT DESC
LIMIT 1;

-- 13.WHAT ARE THE MONTHLY TRENDS IN ORDER VOLUME AND REVENUE?
SELECT DATE_FORMAT(STR_TO_DATE(TRIM(ORDERS.ORDER_DATE), '%c/%e/%Y'), '%Y-%m') AS ORDER_MONTH,
COUNT(DISTINCT ORDERS.ORDER_ID) AS ORDER_VOLUME,
SUM(ORDER_DETAILS.TOTAL_PRICE) AS TOTAL_REVENUE
FROM ORDERS
JOIN ORDER_DETAILS
ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
GROUP BY ORDER_MONTH
ORDER BY ORDER_MONTH;
    
-- 14.HOW DO ORDER PATTERNS VARY ACROSS WEEKDAYS AND WEEKENDS?
SELECT 
CASE 
WHEN DAYOFWEEK(STR_TO_DATE(TRIM(ORDER_DATE), '%c/%e/%Y')) IN (1, 7) 
THEN 'WEEKEND'
ELSE 'WEEKDAY'
END AS DAY_TYPE,
COUNT(DISTINCT ORDERS.ORDER_ID) AS ORDER_VOLUME,
SUM(ORDER_DETAILS.TOTAL_PRICE) AS TOTAL_VOLUME
FROM ORDERS 
JOIN ORDER_DETAILS 
ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
GROUP BY DAY_TYPE
ORDER BY DAY_TYPE;

-- SUPPLIER CONTRIBUTION
-- 15.HOW MANY SUPPLIERS ARE THERE IN THE DATABASE?
SELECT 
	COUNT(DISTINCT SUPPLIER_ID) AS SUPPLIER_COUNT
FROM 
	SUPPLIER;

-- 16.WICH SUPLLIER PROVIDES THE MOST PRODUCTS?
SELECT SUPPLIER.SUPPLIER_ID, SUPPLIER.SUPPLIER_NAME, 
COUNT(PRODUCTS.PRODUCT_ID) AS PRODUCT_COUNT
FROM SUPPLIER
JOIN PRODUCTS
ON PRODUCTS.SUPPLIER_ID = SUPPLIER.SUPPLIER_ID
GROUP BY SUPPLIER.SUPPLIER_ID
ORDER BY PRODUCT_COUNT DESC
LIMIT 1;

-- 17.WHAT IS THE AVERAGE PRICE OF PRODUCTS FROM EACH SUPPLIER?
SELECT SUPPLIER.SUPPLIER_ID,SUPPLIER.SUPPLIER_NAME,
AVG(PRICE) AS AVERAGE_PRICE FROM SUPPLIER
JOIN PRODUCTS
ON PRODUCTS.SUPPLIER_ID = SUPPLIER.SUPPLIER_ID
GROUP BY SUPPLIER.SUPPLIER_ID;

-- 18.WHICH SUPPLIERS CONTRIBUTE THE MOST TO TOTAL PRODUCT SALES(BY REVENUE)?
SELECT SUPPLIER.SUPPLIER_ID, SUPPLIER.SUPPLIER_NAME, 
SUM(ORDER_DETAILS.TOTAL_PRICE) AS PRODUCT_SALES
FROM SUPPLIER
JOIN PRODUCTS
ON SUPPLIER.SUPPLIER_ID = PRODUCTS.SUPPLIER_ID
JOIN ORDER_DETAILS
ON PRODUCTS.PRODUCT_ID = ORDER_DETAILS.PRODUCT_ID
GROUP BY SUPPLIER.SUPPLIER_ID, SUPPLIER.SUPPLIER_NAME
ORDER BY PRODUCT_SALES DESC
LIMIT 1;

-- EMPLOYEE PERFORMANCE
-- 19.HOW MANY EMPLOYEES HAVE PROCESSES ORDERS?
SELECT 
	COUNT(DISTINCT EMPLOYEE_ID) AS EMPLOYEE_COUNT
FROM 
	EMPLOYEES;

-- 20.WHICH EMPLOYEES HAVE HANDLED THE MOST ORDERS?
SELECT EMPLOYEES.EMPLOYEE_ID, EMPLOYEES.EMPLOYEE_NAME, 
COUNT(ORDERS.ORDER_ID) AS ORDERS_COUNT
FROM EMPLOYEES
JOIN ORDERS
ON ORDERS.EMPLOYEE_ID = EMPLOYEES.EMPLOYEE_ID
GROUP BY EMPLOYEES.EMPLOYEE_ID, EMPLOYEES.EMPLOYEE_NAME
ORDER BY ORDERS_COUNT DESC
LIMIT 1;

-- 21.WHAT IS THE TOTAL SALES VALUE PROCESSED BY EACH EMPLOYEE?
SELECT EMPLOYEES.EMPLOYEE_ID, EMPLOYEES.EMPLOYEE_NAME,
SUM(ORDER_DETAILS.TOTAL_PRICE) AS TOTAL_SALES
FROM EMPLOYEES
JOIN ORDERS
ON ORDERS.EMPLOYEE_ID = EMPLOYEES.EMPLOYEE_ID
JOIN ORDER_DETAILS
ON ORDER_DETAILS.ORDER_ID = ORDERS.ORDER_ID
GROUP BY EMPLOYEES.EMPLOYEE_ID, EMPLOYEES.EMPLOYEE_NAME
ORDER BY TOTAL_SALES DESC;

-- 22.WHAT IS THE AVERAGE ORDER VALUE HANDLED PER EMPLOYEE?
SELECT EMPLOYEES.EMPLOYEE_ID, EMPLOYEES.EMPLOYEE_NAME,
SUM(ORDER_DETAILS.TOTAL_PRICE) / COUNT(DISTINCT ORDERS.ORDER_ID) AS AVERAGE_VALUE
FROM EMPLOYEES
JOIN ORDERS
ON ORDERS.EMPLOYEE_ID = EMPLOYEES.EMPLOYEE_ID
JOIN ORDER_DETAILS
ON ORDER_DETAILS.ORDER_ID = ORDERS.ORDER_ID
GROUP BY EMPLOYEES.EMPLOYEE_ID, EMPLOYEES.EMPLOYEE_NAME
ORDER BY AVERAGE_VALUE DESC;

-- ORDER DETAILS DEEP DIVE
-- 23.WHAT IS THE RELATIONSHIP BETWEEN QUANTITY ORDERED AND TOTAL PRICE?
SELECT QUANTITY, SUM(TOTAL_PRICE) AS TOTAL_PRICE,
 COUNT(*) AS ORDER_COUNT FROM ORDER_DETAILS
 GROUP BY QUANTITY
 ORDER BY QUANTITY;

-- 24.WHAT IS THE AVERAGE QUANTITY ORDERED PER PRODUCT?
SELECT PRODUCTS.PRODUCT_ID, PRODUCTS.PRODUCT_NAME,
AVG(ORDER_DETAILS.QUANTITY) AS AVERAGE_QUANTITY_ORDERED
FROM PRODUCTS
JOIN ORDER_DETAILS
ON ORDER_DETAILS.PRODUCT_ID = PRODUCTS.PRODUCT_ID
GROUP BY PRODUCTS.PRODUCT_ID, PRODUCTS.PRODUCT_NAME
ORDER BY AVERAGE_QUANTITY_ORDERED DESC;

-- 25.HOW DOES THE UNIT PRICE VARY ACROSS PRODUCTS AND ORDERS?
SELECT PRODUCTS.PRODUCT_NAME, ORDER_DETAILS.PRODUCT_ID,
AVG(ORDER_DETAILS.EACH_PRICE) AS AVERAGE_UNIT_PRICE,
MIN(ORDER_DETAILS.EACH_PRICE) AS MIN_UNIT_PRICE,
MAX(ORDER_DETAILS.EACH_PRICE) AS MAX_UNIT_PRICE,
COUNT(ORDER_DETAILS.ORDER_ID) AS ORDER_COUNT
FROM ORDER_DETAILS
JOIN PRODUCTS
ON ORDER_DETAILS.PRODUCT_ID = PRODUCTS.PRODUCT_ID
GROUP BY PRODUCTS.PRODUCT_NAME, ORDER_DETAILS.PRODUCT_ID
ORDER BY PRODUCTS.PRODUCT_NAME;













